# -*- coding: utf-8 -*-
"""Time Series Forecasting for Windows Version Market Share.ipynb

Automatically generated by Colab.

# Time Series Forecasting for Windows Version Market Share

This project aims to analyze and forecast the market share of various Windows operating system versions using time series analysis. The dataset contains monthly market share data from September 2013 to September 2024. We will use Python libraries such as pandas, matplotlib, and SARIMAX from statsmodels to conduct the analysis.

Project Goals:

1. Load and preprocess the dataset.
2.   Handle missing data.
3.   Analyze the market share trends of different Windows versions.
4. Use time series decomposition to understand the components of the Windows 10 market share.
5. Build a Seasonal Auto-Regressive Integrated Moving Average (SARIMA) model to forecast future trends.
6. Visualize the results to interpret the findings effectively.

### Step 1: Import Necessary Libraries and Mount Drive
"""

# Import necessary libraries
from google.colab import drive
import pandas as pd

# Mount Google Drive to access the data
drive.mount('/content/drive')

"""### Step 2: Load and Inspect the Data"""

# Specify the file path
file_path = '/content/drive/My Drive/Microsoft Projeleri 2024/Time Series Forecasting for Windows Version Market Share/windows_version-TR-monthly-201309-202409.csv'

# Load the data into a pandas DataFrame
data = pd.read_csv(file_path)

# Display the first few rows of the data
data.head()

"""**Description:**
We load the CSV file containing the monthly market share data into a pandas DataFrame. The initial inspection allows us to understand the data structure and its contents.

### Step 3: Convert Date Column to Datetime Format
"""

# Convert the Date column to datetime format
data['Date'] = pd.to_datetime(data['Date'], format='%Y-%m')

# Check the first few rows again
data.head()

"""**Description:**
The 'Date' column is converted to a datetime format to facilitate time series analysis. This conversion helps in indexing and manipulating the time-based data correctly.

### Step 4: Handle Missing Data
"""

# Check for missing values
missing_values = data.isnull().sum()
print("Missing Values: \n", missing_values)

# Fill missing values using forward fill method
data.fillna(method='ffill', inplace=True)

# Check for missing values again
print("Missing Values after forward fill: \n", data.isnull().sum())

"""**Description:**
We check for missing values in the dataset. If missing values are found, we use the forward fill method to handle them, ensuring a complete dataset for analysis.

### Step 5: Validate Data Consistency
"""

# Calculate the total market share per month to ensure it sums up to 100%
data['Total'] = data[['Win7', 'WinXP', 'Win10', 'Win8.1', 'Win8', 'WinVista', 'Win11', 'Win2003', 'Other']].sum(axis=1)

# Check if the totals are around 100
print("Total Market Share Check: \n", data['Total'].describe())

# Identify any anomalies where the total is not close to 100%
anomalies = data[data['Total'] != 100]
print("Anomalies: \n", anomalies)

"""**Description:**
To ensure data consistency, we calculate the total market share for all Windows versions each month. This total should be close to 100%. Any significant deviations indicate potential data errors or inconsistencies.

### Step 6: Visualize Market Share Trends
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Plot settings for visualization
plt.figure(figsize=(12, 6))

# Plot the market share trends for each Windows version
for column in ['Win7', 'WinXP', 'Win10', 'Win8.1', 'Win8', 'WinVista', 'Win11']:
    plt.plot(data['Date'], data[column], label=column)

plt.title('Market Share Trends of Windows Versions (2013-2024)')
plt.xlabel('Date')
plt.ylabel('Market Share (%)')
plt.legend()
plt.grid(True)
plt.show()

"""**Description:**
This visualization illustrates the market share trends of various Windows versions over time. Each version's trend helps in understanding its rise or decline in market share.

### Step 7: Decompose Time Series for Windows 10 Market Share
"""

from statsmodels.tsa.seasonal import seasonal_decompose

# Create a time series for Windows 10 market share and set the frequency
win10_series = data.set_index('Date')['Win10'].asfreq('MS')

# Decompose the time series to separate trend, seasonality, and noise
decomposition = seasonal_decompose(win10_series, model='additive', period=12)

# Plot the components
decomposition.plot()
plt.suptitle('Decomposition of Windows 10 Market Share Time Series', fontsize=16)
plt.show()

"""**Description:**
Decomposing the Windows 10 market share helps identify its trend, seasonal patterns, and irregular components. This understanding is crucial for building an effective forecasting model.

### Step 8: Build and Train SARIMA Model
"""

from statsmodels.tsa.statespace.sarimax import SARIMAX

# Build the SARIMA model considering seasonality
model = SARIMAX(win10_series, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12), enforce_stationarity=False, enforce_invertibility=False)
sarima_fit = model.fit(disp=False)

# Display the summary of the model
print(sarima_fit.summary())

"""**Description:**
The SARIMA model is constructed to forecast the future market share of Windows 10 by considering both trend and seasonal components. The model summary provides insights into the model parameters and their significance.

### Step 9: Forecast Future Market Share
"""

# Forecast the next 12 months
forecast = sarima_fit.get_forecast(steps=12)
forecast_values = forecast.predicted_mean
confidence_intervals = forecast.conf_int()

# Display forecast values
print("Windows 10 Market Share Forecast for the Next 12 Months:")
print(forecast_values)

"""**Description:**
We forecast the Windows 10 market share for the next 12 months. The confidence intervals provide a range within which the actual values are likely to fall, enhancing the reliability of the predictions.

### Step 10: Visualize Forecast Results
"""

# Visualization of forecast results
plt.figure(figsize=(10, 6))
plt.plot(win10_series.index, win10_series, label='Historical Data', color='blue')
plt.plot(forecast_values.index, forecast_values, label='Forecast', color='green')
plt.fill_between(forecast_values.index, confidence_intervals.iloc[:, 0], confidence_intervals.iloc[:, 1], color='lightgreen', alpha=0.5)
plt.title('Forecast of Windows 10 Market Share (Next 12 Months)')
plt.xlabel('Date')
plt.ylabel('Market Share (%)')
plt.legend()
plt.grid(True)
plt.show()

"""**Description:**
This visualization shows the historical market share of Windows 10 along with the forecasted values for the next 12 months, allowing for easy interpretation of future trends.

### Step 11: Focus on the Forecast Period
"""

# Focus on the forecast period, including the last 12 months of historical data
plt.figure(figsize=(10, 6))
plt.plot(win10_series[-24:].index, win10_series[-24:], label='Historical Data', color='blue')
plt.plot(forecast_values.index, forecast_values, label='Forecast', color='green')
plt.fill_between(forecast_values.index, confidence_intervals.iloc[:, 0], confidence_intervals.iloc[:, 1], color='lightgreen', alpha=0.5)
plt.title('Windows 10 Market Share Forecast (Next 12 Months)')
plt.xlabel('Date')
plt.ylabel('Market Share (%)')
plt.legend()
plt.grid(True)
plt.show()

"""**Description:**
This final plot zooms in on the forecast period and the last 12 months of historical data, making the future trends more visible and easier to understand for stakeholders.
"""
